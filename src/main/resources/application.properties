spring.application.name=ConcertReservationService


#spring.h2.console.enabled=true
#spring.h2.console.path=/h2

#spring.datasource.url=jdbc:h2:file:~/concertdb;AUTO_SERVER=true;NON_KEYWORDS=USER
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa

spring.datasource.url=jdbc:mysql://host.docker.internal:3306/concert
spring.datasource.username=root
spring.datasource.password=1234
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

spring.jpa.hibernate.ddl-auto=create
spring.cache.type=redis

spring.data.redis.host=host.docker.internal
spring.data.redis.port=6379
spring.data.redis.ttlDay=3
queue.batch-size=150

management.endpoints.web.exposure.include=health,prometheus
logging.level.io.prometheus=OFF

spring.kafka.bootstrap-servers= host.docker.internal:9092
spring.kafka.consumer.group-ids.payment-success = PAYMENT-CONSUMER-GROUP
spring.kafka.producer.topic.payment-success= PAYMENT-SUCCESS


spring.kafka.consumer.auto-offset-reset= earliest
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
